plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id("androidx.navigation.safeargs.kotlin")
    id 'com.google.gms.google-services'
}
android {
    namespace 'com.example.androidmoviesproject'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.androidmoviesproject"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding = true
        dataBinding = true
        buildConfig = true

    }
    /** Get API_KEY from local.properties */
//     Gradle Properties
    def propertiesGradle = new Properties()
    propertiesGradle.load(project.rootProject.file('gradle.properties').newDataInputStream())
    def apiKey = propertiesGradle.getProperty('KEY_API_MOVIE_TMDB_GRADLE')
    if (apiKey != null && !apiKey.isEmpty()) {
        android.defaultConfig.buildConfigField "String", "ACCESS_KEY_TBDB", "\"${apiKey}\""
        println "API key set as build config field: ACCESS_KEY_GRADLE = ${apiKey}"
    } else {
        println "API key not found or empty"
    }

//     Local Properties
//    def propertiesProperties = new Properties()
//    def localPropertiesFile = rootProject.file("local.properties")
//    if (localPropertiesFile.exists()) {
//        propertiesProperties.load(new FileInputStream(localPropertiesFile))
//        if (propertiesProperties.containsKey('KEY_API_MOVIE_TMDB')) {
//            def apiKey = propertiesProperties.getProperty('KEY_API_MOVIE_TMDB')
//            println "API key: $apiKey"
//            android.defaultConfig.buildConfigField "String", "ACCESS_KEY_TBDB", "\"${apiKey}\""
//        } else {
//            println "API key not found"
//        }
//    } else {
//        println "local.properties file not found"
//    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.android.material:material:1.8.0'
}


// Retrofit Dependency
dependencies {
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'
}

// Room database Dependency
dependencies {
    def room_version = '2.5.1'
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // To use Kotlin Symbol Processing (KSP)
    implementation("androidx.room:room-ktx:$room_version")
    // optional - RxJava2 support for Room
    implementation("androidx.room:room-rxjava2:$room_version")
    // optional - RxJava3 support for Room
    implementation("androidx.room:room-rxjava3:$room_version")
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation("androidx.room:room-guava:$room_version")
    // optional - Test helpers
    testImplementation("androidx.room:room-testing:$room_version")
    // optional - Paging 3 Integration
    implementation("androidx.room:room-paging:$room_version")
}
// Kotlin coroutine
dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
}
// ViewModel dependency
dependencies {
    def lifecycle_version = '2.6.1'
    def arch_version = '2.2.0'
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    // Annotation processor
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_version")
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")
    // optional - ReactiveStreams support for LiveData
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version")
    // optional - Test helpers for LiveData
    testImplementation("androidx.arch.core:core-testing:$arch_version")
    // optional - Test helpers for Lifecycle runtime
    testImplementation("androidx.lifecycle:lifecycle-runtime-testing:$lifecycle_version")
    // Kotlin
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
}
// Dagger And Hilt
dependencies {
    implementation 'com.google.dagger:dagger:2.45'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.45'
    implementation 'com.google.dagger:dagger-android:2.45'
    implementation 'com.google.dagger:dagger-android-support:2.45'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.45'
    kapt 'com.google.dagger:dagger-compiler:2.45'
    kapt 'com.google.dagger:dagger-android-processor:2.45'
    // Hilt
    implementation 'com.google.dagger:hilt-android:2.45'
    kapt 'com.google.dagger:hilt-compiler:2.45'
    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.45'
    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptTest 'com.google.dagger:hilt-compiler:2.45'
}
kapt {
    correctErrorTypes true
}
dependencies {
    implementation "androidx.fragment:fragment-ktx:1.5.7"
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
}
// Navigation
dependencies {
    def nav_version = "2.5.3"
    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")
    // Feature module Support
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")
    // Testing Navigation
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")
    // Jetpack Compose Integration
    implementation("androidx.navigation:navigation-compose:$nav_version")
}
// Coil
dependencies {
    implementation("io.coil-kt:coil:2.3.0")
}
// Firebase
dependencies {
    implementation 'com.google.firebase:firebase-database:20.2.1'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation platform('com.google.firebase:firebase-bom:32.0.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    // Authentication
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:32.0.0')

    // Add the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-auth-ktx'

    // Also add the dependency for the Google Play services library and specify its version
    implementation 'com.google.android.gms:play-services-auth:20.5.0'


}


dependencies {
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
}

